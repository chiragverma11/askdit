generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum StorageUnitType {
  BYTES
}

enum VoteType {
  UP
  DOWN
}

enum PostType {
  POST
  MEDIA
  LINK
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique

  image    String?
  accounts Account[]
  sessions Session[]

  posts             Post[]
  comments          Comment[]
  commentVote       CommentVote[]
  createdSubreddits Subreddit[]    @relation("CreatedBy")
  subscriptions     Subscription[]
  votes             Vote[]
  bookmarks         Bookmark[]

  storageUsed Int             @default(0)
  storageUnit StorageUnitType @default(BYTES)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subreddit {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]

  creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId   String?
  subscribers Subscription[]

  @@index([creatorId])
  @@index([name])
}

model Subscription {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  subredditId String
  Subreddit   Subreddit @relation(fields: [subredditId], references: [id])

  @@id([userId, subredditId])
  @@index([subredditId])
  @@index([userId])
}

model Post {
  id          String     @id @default(cuid())
  title       String
  type        PostType
  content     Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  subreddit   Subreddit  @relation(fields: [subredditId], references: [id])
  subredditId String
  comments    Comment[]
  votes       Vote[]
  bookmarks   Bookmark[]

  isQuestion Boolean  @default(false)
  isAnswered Boolean? @default(false)

  storageUsed Int             @default(0)
  storageUnit StorageUnitType @default(BYTES)

  @@index([subredditId])
  @@index([authorId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
  deleted   Boolean       @default(false)

  bookmarks Bookmark[]

  acceptedAnswer Boolean @default(false)

  @@index([postId])
  @@index([replyToId])
  @@index([authorId])
  @@index([acceptedAnswer])
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   VoteType

  @@id([userId, postId])
  @@index([postId])
  @@index([userId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
  @@index([commentId])
  @@index([userId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
  @@index([commentId])
  @@index([postId, userId])
  @@index([commentId, userId])
}
